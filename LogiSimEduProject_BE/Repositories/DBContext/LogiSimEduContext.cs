// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using System;
using System.Collections.Generic;

namespace Repositories.Models;

public partial class LogiSimEduContext : DbContext
{
    public LogiSimEduContext()
    {
    }
    public LogiSimEduContext(DbContextOptions<LogiSimEduContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Account> Accounts { get; set; }

    public virtual DbSet<Answer> Answers { get; set; }

    public virtual DbSet<Category> Categories { get; set; }

    public virtual DbSet<Certificate> Certificates { get; set; }

    public virtual DbSet<ChatHistory> ChatHistories { get; set; }

    public virtual DbSet<Class> Classes { get; set; }

    public virtual DbSet<Course> Courses { get; set; }

    public virtual DbSet<CourseProgress> CourseProgresses { get; set; }

    public virtual DbSet<CourseProgressStatus> CourseProgressStatuses { get; set; }

    public virtual DbSet<EnrollmentRequest> EnrollmentRequests { get; set; }

    public virtual DbSet<EnrollmentStatus> EnrollmentStatuses { get; set; }

    public virtual DbSet<EnrollmentWorkSpace> EnrollmentWorkSpaces { get; set; }

    public virtual DbSet<GenderType> GenderTypes { get; set; }

    public virtual DbSet<Lesson> Lessons { get; set; }

    public virtual DbSet<LessonProgress> LessonProgresses { get; set; }

    public virtual DbSet<LessonProgressStatus> LessonProgressStatuses { get; set; }

    public virtual DbSet<LessonStatus> LessonStatuses { get; set; }

    public virtual DbSet<LessonSubmission> LessonSubmissions { get; set; }

    public virtual DbSet<Method> Methods { get; set; }

    public virtual DbSet<Object> Objects { get; set; }

    public virtual DbSet<Order> Orders { get; set; }

    public virtual DbSet<OrderStatus> OrderStatuses { get; set; }

    public virtual DbSet<Organization> Organizations { get; set; }

    public virtual DbSet<Payment> Payments { get; set; }

    public virtual DbSet<PaymentStatus> PaymentStatuses { get; set; }

    public virtual DbSet<Question> Questions { get; set; }

    public virtual DbSet<QuestionSubmission> QuestionSubmissions { get; set; }

    public virtual DbSet<QuestionType> QuestionTypes { get; set; }

    public virtual DbSet<Quiz> Quizzes { get; set; }

    public virtual DbSet<QuizStatus> QuizStatuses { get; set; }

    public virtual DbSet<QuizSubmission> QuizSubmissions { get; set; }

    public virtual DbSet<Review> Reviews { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<Scenario> Scenarios { get; set; }

    public virtual DbSet<Scene> Scenes { get; set; }

    public virtual DbSet<Script> Scripts { get; set; }

    public virtual DbSet<SubscriptionPlan> SubscriptionPlans { get; set; }

    public virtual DbSet<Topic> Topics { get; set; }

    public virtual DbSet<WorkSpace> WorkSpaces { get; set; }

    public static string GetConnectionString(string connectionStringName)
    {
        var config = new ConfigurationBuilder()
            .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
            .AddJsonFile("appsettings.json")
            .Build();

        string connectionString = config.GetConnectionString(connectionStringName);
        return connectionString;
    }


    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer(GetConnectionString("DefaultConnection")).UseQueryTrackingBehavior(QueryTrackingBehavior.NoTracking);

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Account>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Account__3214EC07045D7685");

            entity.ToTable("Account");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Address).HasMaxLength(255);
            entity.Property(e => e.AvtUrl)
                .HasMaxLength(255)
                .HasColumnName("AvtURL");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.DeleteAt)
                .HasColumnType("datetime")
                .HasColumnName("Delete_At");
            entity.Property(e => e.Email).HasMaxLength(100);
            entity.Property(e => e.FullName).HasMaxLength(100);
            entity.Property(e => e.Password).HasMaxLength(255);
            entity.Property(e => e.Phone).HasMaxLength(20);
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");
            entity.Property(e => e.UserName).HasMaxLength(100);

            entity.HasOne(d => d.GenderNavigation).WithMany(p => p.Accounts)
                .HasForeignKey(d => d.Gender)
                .HasConstraintName("FK__Account__Gender__4E88ABD4");

            entity.HasOne(d => d.Organization).WithMany(p => p.Accounts)
                .HasForeignKey(d => d.OrganizationId)
                .HasConstraintName("FK__Account__Organiz__4D94879B");

            entity.HasOne(d => d.Role).WithMany(p => p.Accounts)
                .HasForeignKey(d => d.RoleId)
                .HasConstraintName("FK__Account__RoleId__4CA06362");
        });

        modelBuilder.Entity<Answer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Answer__3214EC07958ED074");

            entity.ToTable("Answer");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.DeleteAt)
                .HasColumnType("datetime")
                .HasColumnName("Delete_At");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");

            entity.HasOne(d => d.Question).WithMany(p => p.Answers)
                .HasForeignKey(d => d.QuestionId)
                .HasConstraintName("FK__Answer__Question__03F0984C");
        });

        modelBuilder.Entity<Category>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Category__3214EC076A1995C4");

            entity.ToTable("Category");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CategoryName).HasMaxLength(100);
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.DeleteAt)
                .HasColumnType("datetime")
                .HasColumnName("Delete_At");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");

            entity.HasOne(d => d.WorkSpace).WithMany(p => p.Categories)
                .HasForeignKey(d => d.WorkSpaceId)
                .HasConstraintName("FK_Category_WorkSpace");
        });

        modelBuilder.Entity<Certificate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Certific__3214EC076712A32A");

            entity.ToTable("Certificate");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CertificateName).HasMaxLength(255);
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.DeleteAt)
                .HasColumnType("datetime")
                .HasColumnName("Delete_At");
            entity.Property(e => e.FileUrl)
                .HasMaxLength(255)
                .HasColumnName("FileURL");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");

            entity.HasOne(d => d.Account).WithMany(p => p.Certificates)
                .HasForeignKey(d => d.AccountId)
                .HasConstraintName("FK__Certifica__Accou__1CBC4616");

            entity.HasOne(d => d.Course).WithMany(p => p.Certificates)
                .HasForeignKey(d => d.CourseId)
                .HasConstraintName("FK__Certifica__Cours__1DB06A4F");
        });

        modelBuilder.Entity<ChatHistory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ChatHist__3214EC0731F3608B");

            entity.Property(e => e.Role).HasMaxLength(10);
            entity.Property(e => e.Timestamp).HasColumnType("datetime");
            entity.Property(e => e.UserId).HasMaxLength(100);
        });

        modelBuilder.Entity<Class>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Class__3214EC07379C4C8C");

            entity.ToTable("Class");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.ClassName).HasMaxLength(100);
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.DeleteAt)
                .HasColumnType("datetime")
                .HasColumnName("Delete_At");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");

            entity.HasOne(d => d.Course).WithMany(p => p.Classes)
                .HasForeignKey(d => d.CourseId)
                .HasConstraintName("FK__Class__CourseId__5FB337D6");

            entity.HasOne(d => d.Instructor).WithMany(p => p.Classes)
                .HasForeignKey(d => d.InstructorId)
                .HasConstraintName("FK__Class__Instructo__5EBF139D");
        });

        modelBuilder.Entity<Course>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Course__3214EC076CA50098");

            entity.ToTable("Course");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CourseName).HasMaxLength(100);
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.DeleteAt)
                .HasColumnType("datetime")
                .HasColumnName("Delete_At");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.ImgUrl)
                .HasMaxLength(255)
                .HasColumnName("ImgURL");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");

            entity.HasOne(d => d.Category).WithMany(p => p.Courses)
                .HasForeignKey(d => d.CategoryId)
                .HasConstraintName("FK__Course__Category__5AEE82B9");

            entity.HasOne(d => d.Instructor).WithMany(p => p.Courses)
                .HasForeignKey(d => d.InstructorId)
                .HasConstraintName("FK__Course__Instruct__59FA5E80");

            entity.HasOne(d => d.WorkSpace).WithMany(p => p.Courses)
                .HasForeignKey(d => d.WorkSpaceId)
                .HasConstraintName("FK__Course__WorkSpac__5BE2A6F2");
        });

        modelBuilder.Entity<CourseProgress>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CoursePr__3214EC07FA9AD633");

            entity.ToTable("CourseProgress");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.DeleteAt)
                .HasColumnType("datetime")
                .HasColumnName("Delete_At");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");

            entity.HasOne(d => d.Account).WithMany(p => p.CourseProgresses)
                .HasForeignKey(d => d.AccountId)
                .HasConstraintName("FK__CoursePro__Accou__14270015");

            entity.HasOne(d => d.Course).WithMany(p => p.CourseProgresses)
                .HasForeignKey(d => d.CourseId)
                .HasConstraintName("FK__CoursePro__Cours__151B244E");

            entity.HasOne(d => d.StatusNavigation).WithMany(p => p.CourseProgresses)
                .HasForeignKey(d => d.Status)
                .HasConstraintName("FK__CoursePro__Statu__160F4887");
        });

        modelBuilder.Entity<CourseProgressStatus>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CoursePr__3214EC075155D7D8");

            entity.ToTable("CourseProgressStatus");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Name).HasMaxLength(50);
        });

        modelBuilder.Entity<EnrollmentRequest>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Enrollme__3214EC07572CBA72");

            entity.ToTable("EnrollmentRequest");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.DeleteAt)
                .HasColumnType("datetime")
                .HasColumnName("Delete_At");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");

            entity.HasOne(d => d.Account).WithMany(p => p.EnrollmentRequests)
                .HasForeignKey(d => d.AccountId)
                .HasConstraintName("FK__Enrollmen__Accou__628FA481");

            entity.HasOne(d => d.Class).WithMany(p => p.EnrollmentRequests)
                .HasForeignKey(d => d.ClassId)
                .HasConstraintName("FK__Enrollmen__Class__6477ECF3");

            entity.HasOne(d => d.Course).WithMany(p => p.EnrollmentRequests)
                .HasForeignKey(d => d.CourseId)
                .HasConstraintName("FK__Enrollmen__Cours__6383C8BA");

            entity.HasOne(d => d.StatusNavigation).WithMany(p => p.EnrollmentRequests)
                .HasForeignKey(d => d.Status)
                .HasConstraintName("FK__Enrollmen__Statu__656C112C");
        });

        modelBuilder.Entity<EnrollmentStatus>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Enrollme__3214EC0730C766EB");

            entity.ToTable("EnrollmentStatus");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<EnrollmentWorkSpace>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Enrollme__3214EC07DF96A695");

            entity.ToTable("EnrollmentWorkSpace");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.DeleteAt)
                .HasColumnType("datetime")
                .HasColumnName("Delete_At");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");

            entity.HasOne(d => d.Account).WithMany(p => p.EnrollmentWorkSpaces)
                .HasForeignKey(d => d.AccountId)
                .HasConstraintName("FK__Enrollmen__Accou__5441852A");

            entity.HasOne(d => d.WorkSpace).WithMany(p => p.EnrollmentWorkSpaces)
                .HasForeignKey(d => d.WorkSpaceId)
                .HasConstraintName("FK__Enrollmen__WorkS__5535A963");
        });

        modelBuilder.Entity<GenderType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__GenderTy__3214EC07353A53CD");

            entity.ToTable("GenderType");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Lesson>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Lesson__3214EC0728F96854");

            entity.ToTable("Lesson");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.DeleteAt)
                .HasColumnType("datetime")
                .HasColumnName("Delete_At");
            entity.Property(e => e.FileUrl)
                .HasMaxLength(255)
                .HasColumnName("FileURL");
            entity.Property(e => e.LessonName).HasMaxLength(100);
            entity.Property(e => e.Title).HasMaxLength(255);
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");

            entity.HasOne(d => d.Scenario).WithMany(p => p.Lessons)
                .HasForeignKey(d => d.ScenarioId)
                .HasConstraintName("FK__Lesson__Scenario__73BA3083");

            entity.HasOne(d => d.StatusNavigation).WithMany(p => p.Lessons)
                .HasForeignKey(d => d.Status)
                .HasConstraintName("FK__Lesson__Status__72C60C4A");

            entity.HasOne(d => d.Topic).WithMany(p => p.Lessons)
                .HasForeignKey(d => d.TopicId)
                .HasConstraintName("FK__Lesson__TopicId__71D1E811");
        });

        modelBuilder.Entity<LessonProgress>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__LessonPr__3214EC07741D3F23");

            entity.ToTable("LessonProgress");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.DeleteAt)
                .HasColumnType("datetime")
                .HasColumnName("Delete_At");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");

            entity.HasOne(d => d.Account).WithMany(p => p.LessonProgresses)
                .HasForeignKey(d => d.AccountId)
                .HasConstraintName("FK__LessonPro__Accou__0F624AF8");

            entity.HasOne(d => d.Lesson).WithMany(p => p.LessonProgresses)
                .HasForeignKey(d => d.LessonId)
                .HasConstraintName("FK__LessonPro__Lesso__10566F31");

            entity.HasOne(d => d.StatusNavigation).WithMany(p => p.LessonProgresses)
                .HasForeignKey(d => d.Status)
                .HasConstraintName("FK__LessonPro__Statu__114A936A");
        });

        modelBuilder.Entity<LessonProgressStatus>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__LessonPr__3214EC07AFCA88D3");

            entity.ToTable("LessonProgressStatus");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Name).HasMaxLength(50);
        });

        modelBuilder.Entity<LessonStatus>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__LessonSt__3214EC0789850731");

            entity.ToTable("LessonStatus");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<LessonSubmission>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__LessonSu__3214EC07C5C370B0");

            entity.ToTable("LessonSubmission");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.DeleteAt)
                .HasColumnType("datetime")
                .HasColumnName("Delete_At");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.SubmitTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");

            entity.HasOne(d => d.Account).WithMany(p => p.LessonSubmissions)
                .HasForeignKey(d => d.AccountId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__LessonSub__Accou__787EE5A0");

            entity.HasOne(d => d.Lesson).WithMany(p => p.LessonSubmissions)
                .HasForeignKey(d => d.LessonId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__LessonSub__Lesso__797309D9");
        });

        modelBuilder.Entity<Method>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Method__3214EC07D88E7782");

            entity.ToTable("Method");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.DeleteAt)
                .HasColumnType("datetime")
                .HasColumnName("Delete_At");
            entity.Property(e => e.MethodName).HasMaxLength(100);
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");

            entity.HasOne(d => d.Object).WithMany(p => p.Methods)
                .HasForeignKey(d => d.ObjectId)
                .HasConstraintName("FK__Method__ObjectId__3B40CD36");
        });

        modelBuilder.Entity<Object>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Object__3214EC07C04E1022");

            entity.ToTable("Object");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.DeleteAt)
                .HasColumnType("datetime")
                .HasColumnName("Delete_At");
            entity.Property(e => e.ObjectName).HasMaxLength(100);
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");

            entity.HasOne(d => d.Scenario).WithMany(p => p.Objects)
                .HasForeignKey(d => d.ScenarioId)
                .HasConstraintName("FK__Object__Scenario__3864608B");
        });

        modelBuilder.Entity<Order>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Order__3214EC071D01111E");

            entity.ToTable("Order");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.DeleteAt)
                .HasColumnType("datetime")
                .HasColumnName("Delete_At");
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.OrderTime).HasColumnType("datetime");
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");

            entity.HasOne(d => d.Account).WithMany(p => p.Orders)
                .HasForeignKey(d => d.AccountId)
                .HasConstraintName("FK__Order__AccountId__236943A5");

            entity.HasOne(d => d.Organization).WithMany(p => p.Orders)
                .HasForeignKey(d => d.OrganizationId)
                .HasConstraintName("FK__Order__Organizat__22751F6C");

            entity.HasOne(d => d.StatusNavigation).WithMany(p => p.Orders)
                .HasForeignKey(d => d.Status)
                .HasConstraintName("FK__Order__Status__25518C17");

            entity.HasOne(d => d.SubcriptionPlan).WithMany(p => p.Orders)
                .HasForeignKey(d => d.SubcriptionPlanId)
                .HasConstraintName("FK__Order__Subcripti__245D67DE");
        });

        modelBuilder.Entity<OrderStatus>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__OrderSta__3214EC07AB401FC6");

            entity.ToTable("OrderStatus");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Name).HasMaxLength(50);
        });

        modelBuilder.Entity<Organization>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Organiza__3214EC0784A41F1C");

            entity.ToTable("Organization");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Address).HasMaxLength(255);
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.DeleteAt)
                .HasColumnType("datetime")
                .HasColumnName("Delete_At");
            entity.Property(e => e.Email).HasMaxLength(100);
            entity.Property(e => e.ImgUrl).HasMaxLength(255);
            entity.Property(e => e.OrganizationName).HasMaxLength(255);
            entity.Property(e => e.Phone).HasMaxLength(20);
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");
        });

        modelBuilder.Entity<Payment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Payment__3214EC0748146F7E");

            entity.ToTable("Payment");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CancelUrl).HasMaxLength(500);
            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.ReturnUrl).HasMaxLength(500);

            entity.HasOne(d => d.Order).WithMany(p => p.Payments)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("FK__Payment__OrderId__282DF8C2");

            entity.HasOne(d => d.StatusNavigation).WithMany(p => p.Payments)
                .HasForeignKey(d => d.Status)
                .HasConstraintName("FK__Payment__Status__29221CFB");
        });

        modelBuilder.Entity<PaymentStatus>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PaymentS__3214EC07FAFE986A");

            entity.ToTable("PaymentStatus");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Name).HasMaxLength(50);
        });

        modelBuilder.Entity<Question>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Question__3214EC0738BCA553");

            entity.ToTable("Question");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.DeleteAt)
                .HasColumnType("datetime")
                .HasColumnName("Delete_At");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");

            entity.HasOne(d => d.QuestionTypeNavigation).WithMany(p => p.Questions)
                .HasForeignKey(d => d.QuestionType)
                .HasConstraintName("FK__Question__Questi__01142BA1");

            entity.HasOne(d => d.Quiz).WithMany(p => p.Questions)
                .HasForeignKey(d => d.QuizId)
                .HasConstraintName("FK__Question__QuizId__00200768");
        });

        modelBuilder.Entity<QuestionSubmission>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Question__3214EC075992C11F");

            entity.ToTable("QuestionSubmission");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.DeleteAt)
                .HasColumnType("datetime")
                .HasColumnName("Delete_At");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");

            entity.HasOne(d => d.Question).WithMany(p => p.QuestionSubmissions)
                .HasForeignKey(d => d.QuestionId)
                .HasConstraintName("FK__QuestionS__Quest__0B91BA14");

            entity.HasOne(d => d.QuizSubmission).WithMany(p => p.QuestionSubmissions)
                .HasForeignKey(d => d.QuizSubmissionId)
                .HasConstraintName("FK__QuestionS__QuizS__0A9D95DB");

            entity.HasOne(d => d.SelectedAnswer).WithMany(p => p.QuestionSubmissions)
                .HasForeignKey(d => d.SelectedAnswerId)
                .HasConstraintName("FK__QuestionS__Selec__0C85DE4D");
        });

        modelBuilder.Entity<QuestionType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Question__3214EC078749BDDB");

            entity.ToTable("QuestionType");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Name).HasMaxLength(50);
        });

        modelBuilder.Entity<Quiz>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Quiz__3214EC071FF0935E");

            entity.ToTable("Quiz");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.DeleteAt)
                .HasColumnType("datetime")
                .HasColumnName("Delete_At");
            entity.Property(e => e.QuizName).HasMaxLength(100);
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");

            entity.HasOne(d => d.Lesson).WithMany(p => p.Quizzes)
                .HasForeignKey(d => d.LessonId)
                .HasConstraintName("FK__Quiz__LessonId__7C4F7684");

            entity.HasOne(d => d.StatusNavigation).WithMany(p => p.Quizzes)
                .HasForeignKey(d => d.Status)
                .HasConstraintName("FK__Quiz__Status__7D439ABD");
        });

        modelBuilder.Entity<QuizStatus>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__QuizStat__3214EC07FFC64E9F");

            entity.ToTable("QuizStatus");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Name).HasMaxLength(50);
        });

        modelBuilder.Entity<QuizSubmission>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__QuizSubm__3214EC079AF46D11");

            entity.ToTable("QuizSubmission");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.DeleteAt)
                .HasColumnType("datetime")
                .HasColumnName("Delete_At");
            entity.Property(e => e.SubmitTime).HasColumnType("datetime");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");

            entity.HasOne(d => d.Account).WithMany(p => p.QuizSubmissions)
                .HasForeignKey(d => d.AccountId)
                .HasConstraintName("FK__QuizSubmi__Accou__06CD04F7");

            entity.HasOne(d => d.Quiz).WithMany(p => p.QuizSubmissions)
                .HasForeignKey(d => d.QuizId)
                .HasConstraintName("FK__QuizSubmi__QuizI__07C12930");
        });

        modelBuilder.Entity<Review>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Review__3214EC070BF4CC12");

            entity.ToTable("Review");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.DeleteAt)
                .HasColumnType("datetime")
                .HasColumnName("Delete_At");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");

            entity.HasOne(d => d.Account).WithMany(p => p.Reviews)
                .HasForeignKey(d => d.AccountId)
                .HasConstraintName("FK__Review__AccountI__18EBB532");

            entity.HasOne(d => d.Course).WithMany(p => p.Reviews)
                .HasForeignKey(d => d.CourseId)
                .HasConstraintName("FK__Review__CourseId__19DFD96B");
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Role__3214EC07998F2449");

            entity.ToTable("Role");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Name).HasMaxLength(50);
        });

        modelBuilder.Entity<Scenario>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Scenario__3214EC073C2EFFC2");

            entity.ToTable("Scenario");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.DeleteAt)
                .HasColumnType("datetime")
                .HasColumnName("Delete_At");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.FileUrl)
                .HasMaxLength(255)
                .HasColumnName("FileURL");
            entity.Property(e => e.ScenarioName).HasMaxLength(100);
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");

            entity.HasOne(d => d.Scene).WithMany(p => p.Scenarios)
                .HasForeignKey(d => d.SceneId)
                .HasConstraintName("FK__Scenario__SceneI__6E01572D");
        });

        modelBuilder.Entity<Scene>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Scene__3214EC07A855D2E8");

            entity.ToTable("Scene");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.DeleteAt)
                .HasColumnType("datetime")
                .HasColumnName("Delete_At");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.SceneName).HasMaxLength(100);
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");
        });

        modelBuilder.Entity<Script>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Script__3214EC0760212859");

            entity.ToTable("Script");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.DeleteAt)
                .HasColumnType("datetime")
                .HasColumnName("Delete_At");
            entity.Property(e => e.ScriptName).HasMaxLength(100);
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");

            entity.HasOne(d => d.Method).WithMany(p => p.Scripts)
                .HasForeignKey(d => d.MethodId)
                .HasConstraintName("FK__Script__MethodId__3E1D39E1");
        });

        modelBuilder.Entity<SubscriptionPlan>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Subscrip__3214EC074AD36466");

            entity.ToTable("SubscriptionPlan");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.DeleteAt)
                .HasColumnType("datetime")
                .HasColumnName("Delete_At");
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");
        });

        modelBuilder.Entity<Topic>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Topic__3214EC073765091C");

            entity.ToTable("Topic");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.DeleteAt)
                .HasColumnType("datetime")
                .HasColumnName("Delete_At");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.ImgUrl)
                .HasMaxLength(255)
                .HasColumnName("ImgURL");
            entity.Property(e => e.TopicName).HasMaxLength(100);
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");

            entity.HasOne(d => d.Course).WithMany(p => p.Topics)
                .HasForeignKey(d => d.CourseId)
                .HasConstraintName("FK__Topic__CourseId__6B24EA82");
        });

        modelBuilder.Entity<WorkSpace>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__WorkSpac__3214EC075A2EBDBF");

            entity.ToTable("WorkSpace");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.DeleteAt)
                .HasColumnType("datetime")
                .HasColumnName("Delete_At");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.ImgUrl)
                .HasMaxLength(255)
                .HasColumnName("ImgURL");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");
            entity.Property(e => e.WorkSpaceName).HasMaxLength(100);

            entity.HasOne(d => d.Organization).WithMany(p => p.WorkSpaces)
                .HasForeignKey(d => d.OrganizationId)
                .HasConstraintName("FK__WorkSpace__Organ__5165187F");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}