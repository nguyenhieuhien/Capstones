// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Repositories.Models;

namespace Repositories.DBContext;

public partial class LogiSimEduContext : DbContext
{
    public LogiSimEduContext()
    {
    }
    public LogiSimEduContext(DbContextOptions<LogiSimEduContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Account> Accounts { get; set; }

    public virtual DbSet<AccountOfCourse> AccountOfCourses { get; set; }

    public virtual DbSet<AccountOfWorkSpace> AccountOfWorkSpaces { get; set; }

    public virtual DbSet<Answer> Answers { get; set; }

    public virtual DbSet<Category> Categories { get; set; }

    public virtual DbSet<Certificate> Certificates { get; set; }

    public virtual DbSet<CertificateTemplete> CertificateTempletes { get; set; }

    public virtual DbSet<ChatHistory> ChatHistories { get; set; }

    public virtual DbSet<Class> Classes { get; set; }

    public virtual DbSet<Course> Courses { get; set; }

    public virtual DbSet<CourseProgress> CourseProgresses { get; set; }

    public virtual DbSet<CourseProgressStatus> CourseProgressStatuses { get; set; }

    public virtual DbSet<EnrollmentStatus> EnrollmentStatuses { get; set; }

    public virtual DbSet<GenderType> GenderTypes { get; set; }

    public virtual DbSet<Lesson> Lessons { get; set; }

    public virtual DbSet<LessonProgress> LessonProgresses { get; set; }

    public virtual DbSet<LessonProgressStatus> LessonProgressStatuses { get; set; }

    public virtual DbSet<LessonStatus> LessonStatuses { get; set; }

    public virtual DbSet<LessonSubmission> LessonSubmissions { get; set; }

    public virtual DbSet<Notification> Notifications { get; set; }

    public virtual DbSet<Order> Orders { get; set; }

    public virtual DbSet<OrderStatus> OrderStatuses { get; set; }

    public virtual DbSet<Organization> Organizations { get; set; }

    public virtual DbSet<Payment> Payments { get; set; }

    public virtual DbSet<PaymentStatus> PaymentStatuses { get; set; }

    public virtual DbSet<Question> Questions { get; set; }

    public virtual DbSet<QuestionSubmission> QuestionSubmissions { get; set; }

    public virtual DbSet<QuestionType> QuestionTypes { get; set; }

    public virtual DbSet<Quiz> Quizzes { get; set; }

    public virtual DbSet<QuizStatus> QuizStatuses { get; set; }

    public virtual DbSet<QuizSubmission> QuizSubmissions { get; set; }

    public virtual DbSet<Review> Reviews { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<Scenario> Scenarios { get; set; }

    public virtual DbSet<Scene> Scenes { get; set; }

    public virtual DbSet<SceneOfWorkSpace> SceneOfWorkSpaces { get; set; }

    public virtual DbSet<SubscriptionPlan> SubscriptionPlans { get; set; }

    public virtual DbSet<Topic> Topics { get; set; }

    public virtual DbSet<WorkSpace> WorkSpaces { get; set; }

    public static string GetConnectionString(string connectionStringName)
    {
        var config = new ConfigurationBuilder()
            .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
            .AddJsonFile("appsettings.json")
            .Build();

        string connectionString = config.GetConnectionString(connectionStringName);
        return connectionString;
    }
    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        => optionsBuilder.UseSqlServer(GetConnectionString("DefaultConnection")).UseQueryTrackingBehavior(QueryTrackingBehavior.NoTracking);

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Account>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Account__3214EC07F71AC661");

            entity.ToTable("Account");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Address).HasMaxLength(255);
            entity.Property(e => e.AvtUrl)
                .HasMaxLength(255)
                .HasColumnName("AvtURL");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.DeleteAt)
                .HasColumnType("datetime")
                .HasColumnName("Delete_At");
            entity.Property(e => e.Email).HasMaxLength(100);
            entity.Property(e => e.FullName).HasMaxLength(100);
            entity.Property(e => e.Password).HasMaxLength(255);
            entity.Property(e => e.Phone).HasMaxLength(20);
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");
            entity.Property(e => e.UserName).HasMaxLength(100);

            entity.HasOne(d => d.GenderNavigation).WithMany(p => p.Accounts)
                .HasForeignKey(d => d.Gender)
                .HasConstraintName("FK__Account__Gender__4E88ABD4");

            entity.HasOne(d => d.Organization).WithMany(p => p.Accounts)
                .HasForeignKey(d => d.OrganizationId)
                .HasConstraintName("FK__Account__Organiz__4D94879B");

            entity.HasOne(d => d.Role).WithMany(p => p.Accounts)
                .HasForeignKey(d => d.RoleId)
                .HasConstraintName("FK__Account__RoleId__4CA06362");
        });

        modelBuilder.Entity<AccountOfCourse>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__AccountO__3214EC07613224B6");

            entity.ToTable("AccountOfCourse");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.DeleteAt)
                .HasColumnType("datetime")
                .HasColumnName("Delete_At");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");

            entity.HasOne(d => d.Account).WithMany(p => p.AccountOfCourses)
                .HasForeignKey(d => d.AccountId)
                .HasConstraintName("FK__AccountOf__Accou__628FA481");

            entity.HasOne(d => d.Class).WithMany(p => p.AccountOfCourses)
                .HasForeignKey(d => d.ClassId)
                .HasConstraintName("FK__AccountOf__Class__6477ECF3");

            entity.HasOne(d => d.Course).WithMany(p => p.AccountOfCourses)
                .HasForeignKey(d => d.CourseId)
                .HasConstraintName("FK__AccountOf__Cours__6383C8BA");

            entity.HasOne(d => d.StatusNavigation).WithMany(p => p.AccountOfCourses)
                .HasForeignKey(d => d.Status)
                .HasConstraintName("FK__AccountOf__Statu__656C112C");
        });

        modelBuilder.Entity<AccountOfWorkSpace>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__AccountO__3214EC0779356749");

            entity.ToTable("AccountOfWorkSpace");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.DeleteAt)
                .HasColumnType("datetime")
                .HasColumnName("Delete_At");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");

            entity.HasOne(d => d.Account).WithMany(p => p.AccountOfWorkSpaces)
                .HasForeignKey(d => d.AccountId)
                .HasConstraintName("FK__AccountOf__Accou__5441852A");

            entity.HasOne(d => d.WorkSpace).WithMany(p => p.AccountOfWorkSpaces)
                .HasForeignKey(d => d.WorkSpaceId)
                .HasConstraintName("FK__AccountOf__WorkS__5535A963");
        });

        modelBuilder.Entity<Answer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Answer__3214EC07C5672F69");

            entity.ToTable("Answer");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.DeleteAt)
                .HasColumnType("datetime")
                .HasColumnName("Delete_At");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");

            entity.HasOne(d => d.Question).WithMany(p => p.Answers)
                .HasForeignKey(d => d.QuestionId)
                .HasConstraintName("FK__Answer__Question__07C12930");
        });

        modelBuilder.Entity<Category>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Category__3214EC076598211E");

            entity.ToTable("Category");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CategoryName).HasMaxLength(100);
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.DeleteAt)
                .HasColumnType("datetime")
                .HasColumnName("Delete_At");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");
        });

        modelBuilder.Entity<Certificate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Certific__3214EC079896FF96");

            entity.ToTable("Certificate");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CertificateName).HasMaxLength(255);
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.DeleteAt)
                .HasColumnType("datetime")
                .HasColumnName("Delete_At");
            entity.Property(e => e.FileUrl)
                .HasMaxLength(255)
                .HasColumnName("FileURL");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");

            entity.HasOne(d => d.Account).WithMany(p => p.Certificates)
                .HasForeignKey(d => d.AccountId)
                .HasConstraintName("FK__Certifica__Accou__2739D489");

            entity.HasOne(d => d.CertiTemp).WithMany(p => p.Certificates)
                .HasForeignKey(d => d.CertiTempId)
                .HasConstraintName("FK__Certifica__Certi__29221CFB");

            entity.HasOne(d => d.Course).WithMany(p => p.Certificates)
                .HasForeignKey(d => d.CourseId)
                .HasConstraintName("FK__Certifica__Cours__282DF8C2");
        });

        modelBuilder.Entity<CertificateTemplete>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Certific__3214EC077403B738");

            entity.ToTable("CertificateTemplete");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.BackgroundUrl)
                .HasMaxLength(255)
                .HasColumnName("BackgroundURL");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.DeleteAt)
                .HasColumnType("datetime")
                .HasColumnName("Delete_At");
            entity.Property(e => e.TemplateName).HasMaxLength(100);
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");

            entity.HasOne(d => d.Course).WithMany(p => p.CertificateTempletes)
                .HasForeignKey(d => d.CourseId)
                .HasConstraintName("FK__Certifica__Cours__245D67DE");

            entity.HasOne(d => d.Organization).WithMany(p => p.CertificateTempletes)
                .HasForeignKey(d => d.OrganizationId)
                .HasConstraintName("FK__Certifica__Organ__236943A5");
        });

        modelBuilder.Entity<ChatHistory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ChatHist__3214EC07B20CFB79");

            entity.Property(e => e.Role).HasMaxLength(10);
            entity.Property(e => e.Timestamp).HasColumnType("datetime");
            entity.Property(e => e.UserId).HasMaxLength(100);
        });

        modelBuilder.Entity<Class>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Class__3214EC07780D46F4");

            entity.ToTable("Class");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.ClassName).HasMaxLength(100);
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.DeleteAt)
                .HasColumnType("datetime")
                .HasColumnName("Delete_At");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");

            entity.HasOne(d => d.Course).WithMany(p => p.Classes)
                .HasForeignKey(d => d.CourseId)
                .HasConstraintName("FK__Class__CourseId__5FB337D6");

            entity.HasOne(d => d.Instructor).WithMany(p => p.Classes)
                .HasForeignKey(d => d.InstructorId)
                .HasConstraintName("FK__Class__Instructo__5EBF139D");
        });

        modelBuilder.Entity<Course>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Course__3214EC07F60A00BB");

            entity.ToTable("Course");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CourseName).HasMaxLength(100);
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.DeleteAt)
                .HasColumnType("datetime")
                .HasColumnName("Delete_At");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.ImgUrl)
                .HasMaxLength(255)
                .HasColumnName("ImgURL");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");

            entity.HasOne(d => d.Category).WithMany(p => p.Courses)
                .HasForeignKey(d => d.CategoryId)
                .HasConstraintName("FK__Course__Category__5AEE82B9");

            entity.HasOne(d => d.Instructor).WithMany(p => p.Courses)
                .HasForeignKey(d => d.InstructorId)
                .HasConstraintName("FK__Course__Instruct__59FA5E80");

            entity.HasOne(d => d.WorkSpace).WithMany(p => p.Courses)
                .HasForeignKey(d => d.WorkSpaceId)
                .HasConstraintName("FK__Course__WorkSpac__5BE2A6F2");
        });

        modelBuilder.Entity<CourseProgress>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CoursePr__3214EC072A4368A1");

            entity.ToTable("CourseProgress");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.DeleteAt)
                .HasColumnType("datetime")
                .HasColumnName("Delete_At");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");

            entity.HasOne(d => d.Account).WithMany(p => p.CourseProgresses)
                .HasForeignKey(d => d.AccountId)
                .HasConstraintName("FK__CoursePro__Accou__17F790F9");

            entity.HasOne(d => d.Course).WithMany(p => p.CourseProgresses)
                .HasForeignKey(d => d.CourseId)
                .HasConstraintName("FK__CoursePro__Cours__18EBB532");

            entity.HasOne(d => d.StatusNavigation).WithMany(p => p.CourseProgresses)
                .HasForeignKey(d => d.Status)
                .HasConstraintName("FK__CoursePro__Statu__19DFD96B");
        });

        modelBuilder.Entity<CourseProgressStatus>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CoursePr__3214EC0758ACF70D");

            entity.ToTable("CourseProgressStatus");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Name).HasMaxLength(50);
        });

        modelBuilder.Entity<EnrollmentStatus>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Enrollme__3214EC07D1F3BD7C");

            entity.ToTable("EnrollmentStatus");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<GenderType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__GenderTy__3214EC0718E533AD");

            entity.ToTable("GenderType");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Lesson>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Lesson__3214EC07B5BFA951");

            entity.ToTable("Lesson");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.DeleteAt)
                .HasColumnType("datetime")
                .HasColumnName("Delete_At");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.LessonName).HasMaxLength(100);
            entity.Property(e => e.Title).HasMaxLength(255);
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");

            entity.HasOne(d => d.Scenario).WithMany(p => p.Lessons)
                .HasForeignKey(d => d.ScenarioId)
                .HasConstraintName("FK__Lesson__Scenario__778AC167");

            entity.HasOne(d => d.StatusNavigation).WithMany(p => p.Lessons)
                .HasForeignKey(d => d.Status)
                .HasConstraintName("FK__Lesson__Status__76969D2E");

            entity.HasOne(d => d.Topic).WithMany(p => p.Lessons)
                .HasForeignKey(d => d.TopicId)
                .HasConstraintName("FK__Lesson__TopicId__75A278F5");
        });

        modelBuilder.Entity<LessonProgress>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__LessonPr__3214EC07D371553E");

            entity.ToTable("LessonProgress");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.DeleteAt)
                .HasColumnType("datetime")
                .HasColumnName("Delete_At");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");

            entity.HasOne(d => d.Account).WithMany(p => p.LessonProgresses)
                .HasForeignKey(d => d.AccountId)
                .HasConstraintName("FK__LessonPro__Accou__1332DBDC");

            entity.HasOne(d => d.Lesson).WithMany(p => p.LessonProgresses)
                .HasForeignKey(d => d.LessonId)
                .HasConstraintName("FK__LessonPro__Lesso__14270015");

            entity.HasOne(d => d.StatusNavigation).WithMany(p => p.LessonProgresses)
                .HasForeignKey(d => d.Status)
                .HasConstraintName("FK__LessonPro__Statu__151B244E");
        });

        modelBuilder.Entity<LessonProgressStatus>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__LessonPr__3214EC073A622DD6");

            entity.ToTable("LessonProgressStatus");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Name).HasMaxLength(50);
        });

        modelBuilder.Entity<LessonStatus>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__LessonSt__3214EC07A7CCD73C");

            entity.ToTable("LessonStatus");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<LessonSubmission>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__LessonSu__3214EC071FC55D64");

            entity.ToTable("LessonSubmission");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.DeleteAt)
                .HasColumnType("datetime")
                .HasColumnName("Delete_At");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.SubmitTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");

            entity.HasOne(d => d.Account).WithMany(p => p.LessonSubmissions)
                .HasForeignKey(d => d.AccountId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__LessonSub__Accou__7C4F7684");

            entity.HasOne(d => d.Lesson).WithMany(p => p.LessonSubmissions)
                .HasForeignKey(d => d.LessonId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__LessonSub__Lesso__7D439ABD");
        });

        modelBuilder.Entity<Notification>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Notifica__3214EC079DF1A62C");

            entity.ToTable("Notification");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.DeleteAt)
                .HasColumnType("datetime")
                .HasColumnName("Delete_At");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.Title).HasMaxLength(255);
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");

            entity.HasOne(d => d.Account).WithMany(p => p.Notifications)
                .HasForeignKey(d => d.AccountId)
                .HasConstraintName("FK__Notificat__Accou__1CBC4616");
        });

        modelBuilder.Entity<Order>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Order__3214EC0721451512");

            entity.ToTable("Order");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.DeleteAt)
                .HasColumnType("datetime")
                .HasColumnName("Delete_At");
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.OrderTime).HasColumnType("datetime");
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");

            entity.HasOne(d => d.Account).WithMany(p => p.Orders)
                .HasForeignKey(d => d.AccountId)
                .HasConstraintName("FK__Order__AccountId__2EDAF651");

            entity.HasOne(d => d.Organization).WithMany(p => p.Orders)
                .HasForeignKey(d => d.OrganizationId)
                .HasConstraintName("FK__Order__Organizat__2DE6D218");

            entity.HasOne(d => d.StatusNavigation).WithMany(p => p.Orders)
                .HasForeignKey(d => d.Status)
                .HasConstraintName("FK__Order__Status__30C33EC3");

            entity.HasOne(d => d.SubcriptionPlan).WithMany(p => p.Orders)
                .HasForeignKey(d => d.SubcriptionPlanId)
                .HasConstraintName("FK__Order__Subcripti__2FCF1A8A");
        });

        modelBuilder.Entity<OrderStatus>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__OrderSta__3214EC0786DBE0C2");

            entity.ToTable("OrderStatus");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Name).HasMaxLength(50);
        });

        modelBuilder.Entity<Organization>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Organiza__3214EC070B6B7339");

            entity.ToTable("Organization");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Address).HasMaxLength(255);
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.DeleteAt)
                .HasColumnType("datetime")
                .HasColumnName("Delete_At");
            entity.Property(e => e.Email).HasMaxLength(100);
            entity.Property(e => e.ImgUrl).HasMaxLength(255);
            entity.Property(e => e.OrganizationName).HasMaxLength(255);
            entity.Property(e => e.Phone).HasMaxLength(20);
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");
        });

        modelBuilder.Entity<Payment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Payment__3214EC073D821E23");

            entity.ToTable("Payment");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CancelUrl).HasMaxLength(500);
            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.ReturnUrl).HasMaxLength(500);

            entity.HasOne(d => d.Order).WithMany(p => p.Payments)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("FK__Payment__OrderId__339FAB6E");

            entity.HasOne(d => d.StatusNavigation).WithMany(p => p.Payments)
                .HasForeignKey(d => d.Status)
                .HasConstraintName("FK__Payment__Status__3493CFA7");
        });

        modelBuilder.Entity<PaymentStatus>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PaymentS__3214EC07FA3621CC");

            entity.ToTable("PaymentStatus");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Name).HasMaxLength(50);
        });

        modelBuilder.Entity<Question>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Question__3214EC07FA8F4D51");

            entity.ToTable("Question");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.DeleteAt)
                .HasColumnType("datetime")
                .HasColumnName("Delete_At");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");

            entity.HasOne(d => d.QuestionTypeNavigation).WithMany(p => p.Questions)
                .HasForeignKey(d => d.QuestionType)
                .HasConstraintName("FK__Question__Questi__04E4BC85");

            entity.HasOne(d => d.Quiz).WithMany(p => p.Questions)
                .HasForeignKey(d => d.QuizId)
                .HasConstraintName("FK__Question__QuizId__03F0984C");
        });

        modelBuilder.Entity<QuestionSubmission>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Question__3214EC0712A005FF");

            entity.ToTable("QuestionSubmission");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.DeleteAt)
                .HasColumnType("datetime")
                .HasColumnName("Delete_At");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");

            entity.HasOne(d => d.Question).WithMany(p => p.QuestionSubmissions)
                .HasForeignKey(d => d.QuestionId)
                .HasConstraintName("FK__QuestionS__Quest__0F624AF8");

            entity.HasOne(d => d.QuizSubmission).WithMany(p => p.QuestionSubmissions)
                .HasForeignKey(d => d.QuizSubmissionId)
                .HasConstraintName("FK__QuestionS__QuizS__0E6E26BF");

            entity.HasOne(d => d.SelectedAnswer).WithMany(p => p.QuestionSubmissions)
                .HasForeignKey(d => d.SelectedAnswerId)
                .HasConstraintName("FK__QuestionS__Selec__10566F31");
        });

        modelBuilder.Entity<QuestionType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Question__3214EC077B9EAA2B");

            entity.ToTable("QuestionType");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Name).HasMaxLength(50);
        });

        modelBuilder.Entity<Quiz>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Quiz__3214EC07A0AD59DF");

            entity.ToTable("Quiz");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.DeleteAt)
                .HasColumnType("datetime")
                .HasColumnName("Delete_At");
            entity.Property(e => e.QuizName).HasMaxLength(100);
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");

            entity.HasOne(d => d.Lesson).WithMany(p => p.Quizzes)
                .HasForeignKey(d => d.LessonId)
                .HasConstraintName("FK__Quiz__LessonId__00200768");

            entity.HasOne(d => d.StatusNavigation).WithMany(p => p.Quizzes)
                .HasForeignKey(d => d.Status)
                .HasConstraintName("FK__Quiz__Status__01142BA1");
        });

        modelBuilder.Entity<QuizStatus>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__QuizStat__3214EC070117E816");

            entity.ToTable("QuizStatus");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Name).HasMaxLength(50);
        });

        modelBuilder.Entity<QuizSubmission>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__QuizSubm__3214EC07B3A2BF35");

            entity.ToTable("QuizSubmission");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.DeleteAt)
                .HasColumnType("datetime")
                .HasColumnName("Delete_At");
            entity.Property(e => e.SubmitTime).HasColumnType("datetime");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");

            entity.HasOne(d => d.Account).WithMany(p => p.QuizSubmissions)
                .HasForeignKey(d => d.AccountId)
                .HasConstraintName("FK__QuizSubmi__Accou__0A9D95DB");

            entity.HasOne(d => d.Quiz).WithMany(p => p.QuizSubmissions)
                .HasForeignKey(d => d.QuizId)
                .HasConstraintName("FK__QuizSubmi__QuizI__0B91BA14");
        });

        modelBuilder.Entity<Review>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Review__3214EC074CD1A705");

            entity.ToTable("Review");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.DeleteAt)
                .HasColumnType("datetime")
                .HasColumnName("Delete_At");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");

            entity.HasOne(d => d.Account).WithMany(p => p.Reviews)
                .HasForeignKey(d => d.AccountId)
                .HasConstraintName("FK__Review__AccountI__1F98B2C1");

            entity.HasOne(d => d.Course).WithMany(p => p.Reviews)
                .HasForeignKey(d => d.CourseId)
                .HasConstraintName("FK__Review__CourseId__208CD6FA");
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Role__3214EC07D0C5632B");

            entity.ToTable("Role");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Name).HasMaxLength(50);
        });

        modelBuilder.Entity<Scenario>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Scenario__3214EC076B584855");

            entity.ToTable("Scenario");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.DeleteAt)
                .HasColumnType("datetime")
                .HasColumnName("Delete_At");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.FileUrl)
                .HasMaxLength(255)
                .HasColumnName("FileURL");
            entity.Property(e => e.ScenarioName).HasMaxLength(100);
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");

            entity.HasOne(d => d.Scene).WithMany(p => p.Scenarios)
                .HasForeignKey(d => d.SceneId)
                .HasConstraintName("FK__Scenario__SceneI__71D1E811");
        });

        modelBuilder.Entity<Scene>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Scene__3214EC078E691EAF");

            entity.ToTable("Scene");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.DeleteAt)
                .HasColumnType("datetime")
                .HasColumnName("Delete_At");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.SceneName).HasMaxLength(100);
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");
        });

        modelBuilder.Entity<SceneOfWorkSpace>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SceneOfW__3214EC07A4F3D26E");

            entity.ToTable("SceneOfWorkSpace");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.DeleteAt)
                .HasColumnType("datetime")
                .HasColumnName("Delete_At");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");

            entity.HasOne(d => d.Scene).WithMany(p => p.SceneOfWorkSpaces)
                .HasForeignKey(d => d.SceneId)
                .HasConstraintName("FK__SceneOfWo__Scene__6A30C649");

            entity.HasOne(d => d.WorkSpace).WithMany(p => p.SceneOfWorkSpaces)
                .HasForeignKey(d => d.WorkSpaceId)
                .HasConstraintName("FK__SceneOfWo__WorkS__6B24EA82");
        });

        modelBuilder.Entity<SubscriptionPlan>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Subscrip__3214EC0723D4B145");

            entity.ToTable("SubscriptionPlan");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.DeleteAt)
                .HasColumnType("datetime")
                .HasColumnName("Delete_At");
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");
        });

        modelBuilder.Entity<Topic>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Topic__3214EC07EE860AF0");

            entity.ToTable("Topic");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.DeleteAt)
                .HasColumnType("datetime")
                .HasColumnName("Delete_At");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.ImgUrl)
                .HasMaxLength(255)
                .HasColumnName("ImgURL");
            entity.Property(e => e.TopicName).HasMaxLength(100);
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");

            entity.HasOne(d => d.Course).WithMany(p => p.Topics)
                .HasForeignKey(d => d.CourseId)
                .HasConstraintName("FK__Topic__CourseId__6EF57B66");
        });

        modelBuilder.Entity<WorkSpace>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__WorkSpac__3214EC0753161EDA");

            entity.ToTable("WorkSpace");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Created_At");
            entity.Property(e => e.DeleteAt)
                .HasColumnType("datetime")
                .HasColumnName("Delete_At");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.ImgUrl)
                .HasMaxLength(255)
                .HasColumnName("ImgURL");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("Updated_At");
            entity.Property(e => e.WorkSpaceName).HasMaxLength(100);

            entity.HasOne(d => d.Organization).WithMany(p => p.WorkSpaces)
                .HasForeignKey(d => d.OrganizationId)
                .HasConstraintName("FK__WorkSpace__Organ__5165187F");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}